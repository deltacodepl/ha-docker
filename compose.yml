name: docker-homeassistant

services:
    # *****************************************************************************
    # homeassistant
    #   Home Assistant is an open-source home automation platform that enables 
    #   users to control and manage smart devices from various brands in a centralized, 
    #   local system. It offers extensive customization, allowing integration with 
    #   devices like lights, thermostats, and sensors through protocols such as 
    #   Zigbee, Z-Wave, and Wi-Fi. Designed for privacy and flexibility, it runs on 
    #   local hardware, giving users full control without relying on cloud services.
    #
    # *****************************************************************************
    homeassistant:
        container_name: homeassistant
        #image: lscr.io/linuxserver/homeassistant:latest
        image: ghcr.io/home-assistant/home-assistant:stable
        platform: linux/arm64/v8
        environment:
            - TZ=${TZ_ID}
            - PUID=${PUID:-0}
            - PGID=${GUID:-0}

        # Not running in privileged mode
        #   - Bluetooth, USB and any other devices must be mapped as volumes or
        #     devices for the host hardware (google is your friend)
        #   - Running as privileged removes this headache at the cost of security
        # privileged: true  

        # If not using privileged mode, Use an unconfined AppArmor profile
        #   - AppArmor restricts what processes—including containers—can do on 
        #     your system. By default, Docker containers run with a somewhat 
        #     restrictive AppArmor profile (docker-default)
        security_opt:
          - apparmor:unconfined

        # Directly map any devices this container needs access to
        #devices:
          #- /dev/ttyUSB0:/dev/ttyUSB0
        volumes:
          - /mnt/usbdata/ha-data/config:/config
          - /etc/localtime:/etc/localtime:ro
          # Needed for bluetooth functionality vis BlueZ on this hardware
          # - /run/dbus:/run/dbus:ro
        ports:
          - 8123:8123
        restart: unless-stopped
        network_mode: host

    # *****************************************************************************
    # esphome
    #   ESPHome is a tool for creating custom firmware for ESP8266/ESP32 devices.
    #   It integrates with Home Assistant for device control. The dashboard runs on port 6052.
    #   Access it at http://<your-server-ip>:6052. 
    #
    # *****************************************************************************
    esphome:
        container_name: esphome
        image: "ghcr.io/esphome/esphome"
        environment:
            - TZ=${TZ_ID}
            - PUID=${PUID:-0}
            - PGID=${PGID:-0}
            - USERNAME=${ESPHOME_USERNAME:-esphome}
            - PASSWORD=${ESPHOME_PASSWORD:-password}
        volumes:
          - esphome-config:/config
          - /etc/localtime:/etc/localtime:ro
        ports:
          - 6052:6052
        restart: unless-stopped
        # privileged: true
        network_mode: host

    # *****************************************************************************
    # code-server
    #   code-server is a self-hosted VS Code instance that runs in the browser.
    #   This setup mounts the Home Assistant config volume as a workspace folder,
    #   allowing you to edit HA configurations directly via the code-server interface.
    #   Access it at http://localhost:8080 (or your host IP:8080).
    #
    # 1. Install the Home Assistant Config Helper Extension (keesschollaart.vscode-home-assistant)
    # 2. Then, make sure the following settings are presents in the: workspace/.vscode/settings.json file.
    #
    #   {
    #       "files.associations": {
    #           "*.yaml": "home-assistant"
    #       },
    #       "vscode-home-assistant.hostUrl": "http://homeassistant.local:8123",
    #       "vscode-home-assistant.longLivedAccessToken": "***long_lived_token_from_HA***",
    #       "vscode-home-assistant.ignoreCertificates": true
    #   } 
    #
    # *****************************************************************************
    vscode:
        container_name: vscode
        image: lscr.io/linuxserver/code-server:latest
        environment:
            - TZ=${TZ_ID}
            - PUID=${PUID:-0}
            - PGID=${GUID:-0}
            - PASSWORD=${VSC_PASSWORD:-password}
            - DEFAULT_WORKSPACE=/config/workspace
        volumes:
          - /mnt/usbdata/ha-data/config:/config/workspace/homeassistant
          - esphome-config:/config/workspace/esphome
          - vscode-config:/config
        ports:
          - 8443:8443
        restart: unless-stopped
        network_mode: host
        
    # *****************************************************************************
    # mosquitto
    #   Eclipse Mosquitto is an open-source MQTT broker that enables lightweight,
    #   publish-subscribe messaging for IoT devices. It integrates with Home Assistant
    #   and ESPHome for device communication. The broker listens on port 1883 for
    #   unencrypted connections (and optionally 8883 for TLS). Configuration and data
    #   are stored in a dedicated volume. Update the configuration file (mosquitto.conf)
    #   to enable authentication or TLS if needed.
    # *****************************************************************************
    mqtt:
        container_name: mqtt
        image: eclipse-mosquitto:latest
        environment:
            - TZ=${TZ_ID}
            - PUID=${PUID:-0}
            - PGID=${PGID:-0}
        volumes:
            - /mnt/usbdata/ha-data/mosquitto-config:/mosquitto/config:ro
            - /mnt/usbdata/ha-data/mosquitto-data:/mosquitto/data
            - /mnt/usbdata/ha-data/mosquitto-log:/mosquitto/log
            - /etc/localtime:/etc/localtime:ro
        ports:
            - 1883:1883
        restart: unless-stopped
        network_mode: host

    # *****************************************************************************
    # victoriametrics
    #   VictoriaMetrics is a high-performance time series database that's compatible
    #   with InfluxDB and Prometheus. It provides long-term storage for Home Assistant
    #   sensor data with excellent compression and query performance. Access the web
    #   UI at http://<your-server-ip>:8428/vmui for data exploration.
    # *****************************************************************************
    victoriametrics:
        container_name: victoriametrics
        image: victoriametrics/victoria-metrics:v1.124.0  # Use specific version, not 'latest'
        environment:
            - TZ=${TZ_ID}
        volumes:
            - victoriametrics-data:/victoria-metrics-data
            - /etc/localtime:/etc/localtime:ro
        ports:
            - 8428:8428
        command:
            - "--retentionPeriod=100y"    # Store data for 100 years (essentially forever)
            - "--selfScrapeInterval=60s"  # Scrape own metrics every 60 seconds
        restart: unless-stopped
        network_mode: host

    # *****************************************************************************
    # grafana
    #   Grafana is an open-source platform for monitoring and visualizing time-series 
    #   data. It integrates with InfluxDB to create customizable dashboards for Home 
    #   Assistant metrics, such as sensor trends or UPS status. The service runs on port 
    #   3000 and provides a web-based interface for creating and viewing dashboards. 
    #   Configuration and dashboard data are stored in a dedicated volume. Update the 
    #   Grafana data source settings to connect to InfluxDB using the appropriate API 
    #   token and bucket.
    # *****************************************************************************
    # grafana:
    #     container_name: grafana
    #     image: grafana/grafana:latest
    #     volumes: 
    #         - grafana:/var/lib/grafana
    #     depends_on:
    #         - victoriametrics
    #     ports:
    #         - 3000:3000
    #     restart: unless-stopped
    #     network_mode: host

    # *****************************************************************************
    # nut
    #   Network UPS Tools (NUT) is an open-source system for monitoring and managing
    #   UPS devices. This service runs a NUT server to communicate with multiple UPS
    #   devices connected via USB or serial interfaces. It exposes port 3493 for
    #   NUT clients (e.g., Home Assistant) to query UPS status. Configuration files
    #   are stored in a dedicated volume, and device mappings are provided for
    #   multiple UPS units. Update the device paths and NUT configuration files
    #   (ups.conf) to match your specific UPS models and connection details.
    #
    # *****************************************************************************
    # nut:
    #     container_name: nut
    #     image: instantlinux/nut-upsd:latest
    #     environment:
    #         - TZ=${TZ_ID}
    #         - PUID=${PUID:-0}
    #         - PGID=${PGID:-0}
    #         - API_PASSWORD=${NUT_API_PASSWORD:-password}
    #     devices:
    #         - /dev/usb/hiddev0:/dev/usb/hiddev0
    #         - /dev/usb/hiddev1:/dev/usb/hiddev1        
    #         - /dev/usb/hiddev2:/dev/usb/hiddev2        
    #     volumes:
    #       - nut-config:/etc/nut
    #       - /etc/localtime:/etc/localtime:ro
    #     ports:
    #       - 3493:3493  # NUT server port for client connections
    #     restart: unless-stopped
    #     privileged: true
    #     network_mode: host

volumes:
    config:
    vscode-config:
    esphome-config:
    esphome-cache:
    mosquitto-config:
    mosquitto-data:
    mosquitto-log:
    victoriametrics-data:
    grafana:
    #nut-config:

